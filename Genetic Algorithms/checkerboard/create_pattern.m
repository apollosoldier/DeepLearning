function [Flat_Image, TwoD_Image] = create_pattern(char)

   
if char == ' '
   Space = [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ];
   TwoD_Image = Space;
   Flat_Image = Space(:);
   return;

elseif char == '.'
   Period= [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 1 1 -1 -1 -1 -1
             -1 -1 -1 -1 1 1 -1 -1 -1 -1 ];
   TwoD_Image = Period;
   Flat_Image = Period(:); 
   return;

else

   switch upper(char)   
   case 'A'
      A =     [ -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1];
      TwoD_Image = A;
      Flat_Image = A(:);      

   case 'B'
      B =  [ -1 1 1 1 1 1 1 -1 -1 -1
             -1 1 1 1 1 1 1 1 -1 -1
             -1 1 1 -1 -1 -1 1 1 -1 -1
             -1 1 1 -1 -1 -1 1 1 -1 -1
             -1 1 1 1 1 1 1 -1 -1 -1
             -1 1 1 1 1 1 1 -1 -1 -1
             -1 1 1 -1 -1 -1 1 1 -1 -1
             -1 1 1 -1 -1 -1 1 1 -1 -1
             -1 1 1 1 1 1 1 1 -1 -1
             -1 1 1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = B;
      Flat_Image = B(:);

   case 'C'
      C =     [ -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 1 1 1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 1 -1 -1 -1 1 1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = C;
      Flat_Image = C(:);       

   case 'D'
      D =     [  -1 1 1 1 1 1 1 -1 -1 -1   
                 -1 1 1 1 1 1 1 1 -1 -1
                 -1 1 1 -1 -1 -1 1 1 1 -1 
                 -1 1 1 -1 -1 -1 -1 1 1 -1 
                 -1 1 1 -1 -1 -1 -1 1 1 -1
                 -1 1 1 -1 -1 -1 -1 1 1 -1
                 -1 1 1 -1 -1 -1 -1 1 1 -1 
                 -1 1 1 -1 -1 -1 1 1 1 -1  
                 -1 1 1 1 1 1 1 1 -1 -1  
                 -1 1 1 1 1 1 1 -1 -1 -1    ];
      TwoD_Image = D;
      Flat_Image = D(:);

    case 'E'
      E =     [ -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1  ];
      TwoD_Image = E;
      Flat_Image = E(:);

   case 'F'   
      F =     [ -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1  ];
      TwoD_Image = F;
      Flat_Image = F(:);

   case 'G'  
      G =     [ -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 1 1 1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 1 1 1 1 -1
                -1 1 1 -1 -1 1 1 1 1 -1
                -1 1 1 1 -1 -1 -1 1 1 -1
                -1 -1 1 1 1 1 1 1 1 -1
                -1 -1 -1 1 1 1 1 1 -1 -1 ];
      TwoD_Image = G;
      Flat_Image = G(:);       

   case 'H'
      H =     [ -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1 ];
      TwoD_Image = H;
      Flat_Image = H(:);

    case 'I'
      I =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = I;
      Flat_Image = I(:);

     case 'J'
      J =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = J;
      Flat_Image = J(:);

   case 'K'
      K =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 1 1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 1 1 -1 -1 -1
                -1 -1 1 1 1 1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 -1 -1 -1
                -1 -1 1 1 -1 1 1 -1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 -1 -1 1 1 -1
                -1 -1 1 1 -1 -1 -1 -1 1 1 ];
      TwoD_Image = K;
      Flat_Image = K(:);

    case 'L'  
       L =    [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 1 -1 -1  ];
      TwoD_Image = L;
      Flat_Image = L(:);

   case 'M'
      M =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 1 -1 -1 -1 -1 1 1 1
                1 1 1 1 -1 -1 1 1 1 1
                1 1 -1 1 1 1 1 -1 1 1
                1 1 -1 -1 1 1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1 ];
      TwoD_Image = M;      
      Flat_Image = M(:);

   case 'N'
      N =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 1 -1 -1 -1 -1 -1 1 1
                1 1 1 1 -1 -1 -1 -1 1 1
                1 1 -1 1 1 -1 -1 -1 1 1
                1 1 -1 -1 1 1 -1 -1 1 1
                1 1 -1 -1 -1 1 1 -1 1 1
                1 1 -1 -1 -1 -1 1 1 1 1
                1 1 -1 -1 -1 -1 -1 1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1 ];
      TwoD_Image = N;      
      Flat_Image = N(:);

    case 'O'
      O =      [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                 -1 -1 1 1 1 1 1 -1 -1 -1
                 -1 1 1 1 1 1 1 1 -1 -1 
                 1 1 1 -1 -1 -1 1 1 1 -1
                 1 1 -1 -1 -1 -1 -1 1 1 -1
                 1 1 -1 -1 -1 -1 -1 1 1 -1
                 1 1 -1 -1 -1 -1 -1 1 1 -1
                 1 1 1 -1 -1 -1 1 1 1 -1
                 -1 1 1 1 1 1 1 1 -1 -1
                 -1 -1 1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = O;
      Flat_Image = O(:);    

   case 'P'
      P =     [ -1 1 1 1 1 1 1 -1 -1 -1
                -1 1 1 1 1 1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 1 1 1 -1 1 -1 -1
                -1 1 1 1 1 1 1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1 ];
      TwoD_Image = P;
      Flat_Image = P(:);

   case 'Q'
      Q =      [ -1 -1 1 1 1 1 1 -1 -1 -1     
                 -1 1 1 1 1 1 1 1 -1 -1    
                 1 1 1 -1 -1 -1 1 1 1 -1  
                 1 1 -1 -1 -1 -1 -1 1 1 -1  
                 1 1 -1 -1 -1 -1 -1 1 1 -1  
                 1 1 1 -1 -1 -1 1 1 1 -1  
                 -1 1 1 1 1 1 1 1 1 -1
                 -1 -1 1 1 1 1 1 1 -1 -1
                 -1 -1 -1 -1 -1 -1 1 1 1 -1 
                 -1 -1 -1 -1 -1 -1 -1 1 1 1 ];
      TwoD_Image = Q;
      Flat_Image = Q(:);    

   case 'R'
      R =     [ -1 1 1 1 1 1 1 -1 -1 -1
                -1 1 1 1 1 1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 1 1 1 1 -1 -1 -1
                -1 1 1 1 1 1 1 -1 -1 -1
                -1 1 1 -1 1 1 -1 -1 -1 -1
                -1 1 1 -1 -1 1 1 -1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1 ];
      TwoD_Image = R;
      Flat_Image = R(:);

   case 'S'
      S =     [ -1 -1 1 1 1 1 1 -1 -1 -1
                -1 1 1 1 1 1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 1 1 1 -1 -1 -1 -1
                -1 -1 1 1 1 1 1 -1 -1 -1
                -1 -1 -1 -1 -1 1 1 1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 1 1 1 1 1 1 1 -1 -1
                -1 -1 1 1 1 1 1 -1 -1 -1 ];
      TwoD_Image = S;
      Flat_Image = S(:);

   case 'T'
      T     = [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1  1  1  1 1 1  1  1  1 -1
                -1  1  1  1 1 1  1  1  1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1 ];
      TwoD_Image = T;
      Flat_Image = T(:);

   case 'U'
      U =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 -1 1 1 1 1 1 1 -1 -1 ];
      TwoD_Image = U;
      Flat_Image = U(:);

   case 'V'
      V =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1 ];
      TwoD_Image = V;
      Flat_Image = V(:);

   case 'W'
      W =     [ 1 1 -1 -1 -1 -1 -1 -1 1 1 
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1
                1 1 -1 -1 1 1 -1 -1 1 1
                1 1 -1 -1 1 1 -1 -1 1 1
                1 1 -1 1 1 1 1 -1 1 1
                1 1 1 1 -1 -1 1 1 1 1
                1 1 1 -1 -1 -1 -1 1 1 1
                1 1 -1 -1 -1 -1 -1 -1 1 1 ];
      TwoD_Image = W;
      Flat_Image = W(:);

   case 'X'
      X =     [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                1 1 -1 -1 -1 -1 -1 1 1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                -1 -1 1 1 -1 1 1 -1 -1 -1
                -1 -1 -1 1 1 1 -1 -1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 1 1 -1 1 1 -1 -1 -1
                -1 1 1 -1 -1 -1 1 1 -1 -1
                1 1 -1 -1 -1 -1 -1 1 1 -1
                -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ];
      TwoD_Image = X;
      Flat_Image = X(:);

   case 'Y'
      Y =     [ 1 1 -1 -1 -1 -1 -1 -1 1 1
                -1 1 1 -1 -1 -1 -1 1 1 -1
                -1 -1 1 1 -1 -1 1 1 -1 -1
                -1 -1 -1 1 1 1 1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1 ];
      TwoD_Image = Y;      
      Flat_Image = Y(:);

   case 'Z'
      Z   =   [ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 1 1 1 1 1 1 1 1 -1
                -1 -1 -1 -1 -1 -1 1 1 -1 -1
                -1 -1 -1 -1 -1 1 1 -1 -1 -1
                -1 -1 -1 -1 1 1 -1 -1 -1 -1
                -1 -1 -1 1 1 -1 -1 -1 -1 -1
                -1 -1 1 1 -1 -1 -1 -1 -1 -1
                -1 1 1 1 1 1 1 1 1 -1 
                -1 1 1 1 1 1 1 1 1 -1 ];
      TwoD_Image = Z;
      Flat_Image = Z(:);

   end;
end;



return;

       
       
